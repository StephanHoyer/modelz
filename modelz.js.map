{"version":3,"file":"modelz.js","sources":["src/util.js","src/index.js"],"sourcesContent":["'use strict'\n\nexport function noop() {}\n\nexport function identity(thing) {\n  return thing\n}\n\nexport function type(obj) {\n  return {}.toString.call(obj)\n}\n\nexport function isObject(thing) {\n  return thing !== null && type(thing) === '[object Object]'\n}\n\nexport function isArray(thing) {\n  return type(thing) == '[object Array]'\n}\n\nexport function isFunction(thing) {\n  return typeof thing === 'function'\n}\n\nexport function isString(thing) {\n  return typeof thing === 'string'\n}\n\nexport function isNumber(thing) {\n  return typeof thing === 'number'\n}\n\nexport function isUndefined(thing) {\n  return typeof thing === 'undefined'\n}\n\nexport function result(value, sourceData) {\n  return isFunction(value) ? value(sourceData) : value\n}\n","'use strict'\n\nimport {\n  identity,\n  isArray,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  result,\n  noop,\n} from './util.js'\n\nconst defaultFieldConfig = {\n  construct: identity,\n  getCacheKey: noop,\n  enumerable: true,\n  required: false,\n  format: identity,\n  parse: identity,\n}\n\nconst defaultGlobalConfig = {\n  castString: true,\n  parseNumbers: true,\n  onChangeListener: () => noop,\n  extraProperties: false,\n  embedPlainData: true,\n  preInit: identity,\n  postInit: identity,\n  types: {},\n}\n\nfunction createCacheFunction({ cacheKey }) {\n  if (isArray(cacheKey)) {\n    return (obj) =>\n      cacheKey\n        .map((prop) =>\n          obj[prop] instanceof Date ? obj[prop].getTime() : obj[prop]\n        )\n        .join('|<3|')\n  }\n  if (isFunction(cacheKey)) {\n    return cacheKey\n  }\n  return noop\n}\n\nfunction modelz(globalConfig) {\n  const {\n    castString,\n    debug,\n    embedPlainData,\n    extraProperties,\n    onChangeListener,\n    parseNumbers,\n    postInit,\n    preInit,\n    types,\n  } = {\n    ...defaultGlobalConfig,\n    ...globalConfig,\n  }\n  function getConstructor(item, fieldName) {\n    const constructors = {\n      string(value) {\n        if (isString(value)) {\n          return value\n        }\n        if (castString) {\n          return '' + value\n        }\n        throw Error(`Expect a string for \"${fieldName}\", got \"${value}\"`)\n      },\n      number(value) {\n        if (isNumber(value)) {\n          return value\n        }\n        if (isString(value) && parseNumbers) {\n          return parseFloat(value)\n        }\n        throw Error(`Expect a number for \"${fieldName}\", got \"${value}\"`)\n      },\n      boolean(value) {\n        return !!value\n      },\n      array(value) {\n        return [...value]\n      },\n      object(value) {\n        return { ...value }\n      },\n      date(value) {\n        return new Date(value)\n      },\n      identity,\n      ...types,\n    }\n\n    if (isFunction(item)) {\n      return item\n    }\n    if (constructors[item] == null) {\n      throw Error(\n        `Try to use unknown type \"${item}\" as type for \"${fieldName}\"`\n      )\n    }\n    return constructors[item]\n  }\n  function parseConfig(fieldConfig, fieldName) {\n    if (isObject(fieldConfig)) {\n      if (isFunction(fieldConfig.construct)) {\n        // constructor\n        return fieldConfig\n      }\n\n      if (isString(fieldConfig.type)) {\n        // type\n        return {\n          construct: getConstructor(fieldConfig.type, fieldName),\n          ...fieldConfig,\n        }\n      }\n\n      if (isFunction(fieldConfig.get)) {\n        return {\n          getCacheKey: createCacheFunction(fieldConfig),\n          get: fieldConfig.get,\n          set: fieldConfig.set,\n          enumerable: fieldConfig.enumerable || false,\n        }\n      }\n    }\n\n    if (isArray(fieldConfig) && fieldConfig.length === 2) {\n      // short syntax without default [type, required]\n      const [type, required] = fieldConfig\n      return {\n        construct: getConstructor(type, fieldName),\n        required,\n      }\n    }\n\n    if (isArray(fieldConfig) && fieldConfig.length === 3) {\n      // short syntax [type, required, default]\n      const [type, required, defaultValue] = fieldConfig\n      return {\n        construct: getConstructor(type, fieldName),\n        required,\n        default: defaultValue,\n      }\n    }\n\n    if (isFunction(fieldConfig)) {\n      // plain construct\n      return {\n        construct: fieldConfig,\n      }\n    }\n\n    if (isString(fieldConfig)) {\n      try {\n        // init by type\n        return {\n          construct: getConstructor(fieldConfig, fieldName),\n        }\n      } catch (e) {\n        // fail silently and try next init\n      }\n    }\n\n    try {\n      // init by default\n      return {\n        construct: getConstructor(typeof fieldConfig, fieldName),\n        required: true,\n        default: fieldConfig,\n      }\n    } catch (e) {\n      throw new Error(\n        `No proper config handler found for config:\\n${JSON.stringify(\n          fieldConfig\n        )}`\n      )\n    }\n  }\n\n  return function Schema(fields, config) {\n    config = {\n      embedPlainData,\n      extraProperties,\n      preInit,\n      postInit,\n      onChangeListener,\n      ...config,\n    }\n    const modelName = config.name ? config.name : 'instance'\n    const thisSchema = { modelName }\n    return function construct(sourceData = {}) {\n      debug &&\n        debug.extend('create')(\n          `constructing ${modelName} with data %O`,\n          sourceData\n        )\n      if (sourceData._schema === thisSchema) {\n        return sourceData\n      }\n      const _data = {}\n\n      let instance = {}\n      if (config.extraProperties) {\n        instance = { ...sourceData }\n      } else if (debug) {\n        const fieldKeys = Object.keys(fields)\n        const ignoredProperties = Object.keys(sourceData).filter(\n          (key) => !fieldKeys.includes(key)\n        )\n        if (ignoredProperties.length) {\n          debug.extend('warn')(\n            `The properties %o are not defined on target ${modelName} and will therefore be dropped.`,\n            ignoredProperties\n          )\n        }\n      }\n\n      if (config.embedPlainData) {\n        Object.defineProperty(instance, '_data', {\n          get: () => _data,\n          enumerable: false,\n        })\n      }\n      Object.defineProperty(instance, '_isInitialized', {\n        get: () => true,\n        enumerable: false,\n      })\n      Object.defineProperty(instance, '_schema', {\n        get: () => thisSchema,\n        enumerable: false,\n      })\n      instance = config.preInit(instance)\n      const onChange = config.onChangeListener(instance)\n      for (const fieldName in fields) {\n        const fieldConfig = {\n          ...defaultFieldConfig,\n          ...parseConfig(fields[fieldName], fieldName),\n        }\n        const { format, parse } = fieldConfig\n        Object.defineProperty(instance, fieldName, {\n          enumerable: fieldConfig.enumerable,\n          get: function () {\n            if (fieldConfig.get) {\n              const key = fieldConfig.getCacheKey(instance)\n              if (\n                !_data.hasOwnProperty(fieldName) ||\n                key == null ||\n                key !== _data[fieldName].key\n              ) {\n                _data[fieldName] = { key, value: fieldConfig.get(instance) }\n              }\n              return format(_data[fieldName].value)\n            }\n            return format(_data[fieldName], instance, fieldConfig)\n          },\n          set: function (value) {\n            value = parse(value, instance, fieldConfig)\n            const oldValue = instance[fieldName]\n            if (fieldConfig.set) {\n              fieldConfig.set(instance, value)\n            } else if (!fieldConfig.required && value == null) {\n              _data[fieldName] = value = null\n            } else {\n              _data[fieldName] = fieldConfig.construct(\n                value,\n                instance,\n                fieldConfig\n              )\n            }\n            onChange(fieldName, value, oldValue)\n          },\n        })\n\n        if (sourceData[fieldName] != null) {\n          instance[fieldName] = sourceData[fieldName]\n        } else if (fieldConfig.hasOwnProperty('default')) {\n          instance[fieldName] = result(fieldConfig.default, sourceData)\n        } else if (fieldConfig.required) {\n          throw Error('No value set for ' + fieldName)\n        } else if (!fieldConfig.get) {\n          // default to null if it's not a computed prop\n          instance[fieldName] = null\n        }\n      }\n      instance = config.postInit(instance)\n      if (!extraProperties) {\n        Object.seal(instance)\n      }\n      return instance\n    }\n  }\n}\n\nexport default modelz\n"],"names":["noop","identity","thing","type","obj","toString","call","isArray","isFunction","isString","result","value","sourceData","defaultFieldConfig","construct","getCacheKey","enumerable","required","format","parse","defaultGlobalConfig","castString","parseNumbers","onChangeListener","extraProperties","embedPlainData","preInit","postInit","types","createCacheFunction","cacheKey","map","prop","Date","getTime","join","globalConfig","debug","getConstructor","item","fieldName","constructors","string","Error","number","parseFloat","boolean","array","object","date","parseConfig","fieldConfig","get","set","length","defaultValue","default","e","JSON","stringify","fields","config","modelName","name","thisSchema","extend","_schema","_data","instance","fieldKeys","Object","keys","ignoredProperties","filter","key","includes","defineProperty","onChange","hasOwnProperty","oldValue","seal"],"mappings":"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"}
{"version":3,"file":"modelz.min.js","sources":["src/util.js","src/index.js"],"sourcesContent":["'use strict'\n\nexport function noop() {}\n\nexport function identity(thing) {\n  return thing\n}\n\nexport function type(obj) {\n  return {}.toString.call(obj)\n}\n\nexport function isObject(thing) {\n  return thing !== null && type(thing) === '[object Object]'\n}\n\nexport function isArray(thing) {\n  return type(thing) == '[object Array]'\n}\n\nexport function isFunction(thing) {\n  return typeof thing === 'function'\n}\n\nexport function isString(thing) {\n  return typeof thing === 'string'\n}\n\nexport function isNumber(thing) {\n  return typeof thing === 'number'\n}\n\nexport function isUndefined(thing) {\n  return typeof thing === 'undefined'\n}\n","'use strict'\n\nimport {\n  identity,\n  isArray,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  noop,\n} from './util.js'\n\nconst defaultFieldConfig = {\n  construct: identity,\n  getCacheKey: noop,\n  enumerable: true,\n  required: false,\n}\n\nconst defaultGlobalConfig = {\n  castString: true,\n  parseNumbers: true,\n  onChangeListener: function () {\n    return noop\n  },\n  extraProperties: false,\n  embedPlainData: true,\n  preInit: identity,\n  postInit: identity,\n  types: {},\n}\n\nfunction createCacheFunction(fieldConfig) {\n  if (isArray(fieldConfig.cacheKey)) {\n    return function (obj) {\n      return fieldConfig.cacheKey.map((prop) => obj[prop]).join('|<3|')\n    }\n  }\n  if (isFunction(fieldConfig.cacheKey)) {\n    return fieldConfig.cacheKey\n  }\n  return noop\n}\n\nfunction modelz(globalConfig) {\n  globalConfig = Object.assign({}, defaultGlobalConfig, globalConfig)\n  function getConstructor(item, fieldName) {\n    const constructors = Object.assign(\n      {\n        string(value) {\n          if (isString(value)) {\n            return value\n          }\n          if (globalConfig.castString) {\n            return '' + value\n          }\n          throw Error(`Expect a string for \"${fieldName}\", got \"${value}\"`)\n        },\n        number(value) {\n          if (isNumber(value)) {\n            return value\n          }\n          if (isString(value) && globalConfig.parseNumbers) {\n            return parseFloat(value)\n          }\n          throw Error(`Expect a number for \"${fieldName}\", got \"${value}\"`)\n        },\n        boolean(value) {\n          return !!value\n        },\n        array(value) {\n          return [].concat(value)\n        },\n        object(value) {\n          return Object.assign({}, value)\n        },\n        date(value) {\n          return new Date(value)\n        },\n        identity,\n      },\n      globalConfig.types\n    )\n\n    if (isFunction(item)) {\n      return item\n    }\n    if (constructors[item] == null) {\n      throw Error(\n        `Try to use unknown type \"${item}\" as type for \"${fieldName}\"`\n      )\n    }\n    return constructors[item]\n  }\n  function parseConfig(fieldConfig, fieldName) {\n    if (isObject(fieldConfig)) {\n      if (isFunction(fieldConfig.construct)) {\n        // constructor\n        return fieldConfig\n      }\n\n      if (isString(fieldConfig.type)) {\n        // type\n        return Object.assign(\n          {\n            construct: getConstructor(fieldConfig.type, fieldName),\n          },\n          fieldConfig\n        )\n      }\n\n      if (isFunction(fieldConfig.get)) {\n        return {\n          getCacheKey: createCacheFunction(fieldConfig),\n          get: fieldConfig.get,\n          set: fieldConfig.set,\n          enumerable: fieldConfig.enumerable || false,\n        }\n      }\n    }\n\n    if (isArray(fieldConfig) && fieldConfig.length === 2) {\n      // short syntax without default [type, required]\n      const [type, required] = fieldConfig\n      return {\n        construct: getConstructor(type, fieldName),\n        required,\n      }\n    }\n\n    if (isArray(fieldConfig) && fieldConfig.length === 3) {\n      // short syntax [type, required, default]\n      const [type, required, defaultValue] = fieldConfig\n      return {\n        construct: getConstructor(type, fieldName),\n        required,\n        default: defaultValue,\n      }\n    }\n\n    if (isFunction(fieldConfig)) {\n      // plain construct\n      return {\n        construct: fieldConfig,\n      }\n    }\n\n    if (isString(fieldConfig)) {\n      try {\n        // init by type\n        return {\n          construct: getConstructor(fieldConfig, fieldName),\n        }\n      } catch (e) {\n        // fail silently and try next init\n      }\n    }\n\n    try {\n      // init by default\n      return {\n        construct: getConstructor(typeof fieldConfig, fieldName),\n        required: true,\n        default: fieldConfig,\n      }\n    } catch (e) {\n      throw new Error(\n        `No proper config handler found for config:\\n${JSON.stringify(\n          fieldConfig\n        )}`\n      )\n    }\n  }\n\n  return function Schema(fields, config) {\n    config = Object.assign({}, globalConfig, config)\n    const modelName = config.name ? config.name : 'instance'\n    const thisSchema = { modelName }\n    return function construct(sourceData = {}) {\n      globalConfig.debug &&\n        globalConfig.debug.extend('create')(\n          `constructing ${modelName} with data %O`,\n          sourceData\n        )\n      if (sourceData._schema === thisSchema) {\n        return sourceData\n      }\n      const _data = {}\n      let onChange = noop\n\n      let result = {}\n      if (config.extraProperties) {\n        result = Object.assign({}, sourceData)\n      } else if (globalConfig.debug) {\n        const fieldKeys = Object.keys(fields)\n        const ignoredProperties = Object.keys(sourceData).filter(\n          (key) => !fieldKeys.includes(key)\n        )\n        if (ignoredProperties.length) {\n          globalConfig.debug.extend('warn')(\n            `The properties %o are not defined on target ${modelName} and will therefore be dropped.`,\n            ignoredProperties\n          )\n        }\n      }\n\n      if (config.embedPlainData) {\n        Object.defineProperty(result, '_data', {\n          get: () => _data,\n          enumerable: false,\n        })\n      }\n      Object.defineProperty(result, '_isInitialized', {\n        get: () => true,\n        enumerable: false,\n      })\n      Object.defineProperty(result, '_schema', {\n        get: () => thisSchema,\n        enumerable: false,\n      })\n      result = config.preInit(result)\n      onChange = config.onChangeListener(result)\n      for (const fieldName in fields) {\n        const fieldConfig = Object.assign(\n          {},\n          defaultFieldConfig,\n          parseConfig(fields[fieldName], fieldName)\n        )\n        Object.defineProperty(result, fieldName, {\n          enumerable: fieldConfig.enumerable,\n          get: function () {\n            if (fieldConfig.get) {\n              const key = fieldConfig.getCacheKey(result)\n              if (\n                !_data.hasOwnProperty(fieldName) ||\n                key == null ||\n                key !== _data[fieldName].key\n              ) {\n                _data[fieldName] = { key, value: fieldConfig.get(result) }\n              }\n              return _data[fieldName].value\n            }\n            return result._data[fieldName]\n          },\n          set: function (value) {\n            const oldValue = result[fieldName]\n            if (isFunction(fieldConfig.set)) {\n              fieldConfig.set(result, value)\n            } else if (!fieldConfig.required && value == null) {\n              _data[fieldName] = value = null\n            } else {\n              _data[fieldName] = fieldConfig.construct(\n                value,\n                result,\n                fieldConfig\n              )\n            }\n            onChange(fieldName, value, oldValue)\n          },\n        })\n\n        if (sourceData[fieldName] != null) {\n          result[fieldName] = sourceData[fieldName]\n        } else if (fieldConfig.hasOwnProperty('default')) {\n          if (isFunction(fieldConfig.default)) {\n            result[fieldName] = fieldConfig.default(sourceData)\n          } else {\n            result[fieldName] = fieldConfig.default\n          }\n        } else if (fieldConfig.required) {\n          throw Error('No value set for ' + fieldName)\n        } else if (!fieldConfig.get) {\n          // default to null if it's not a computed prop\n          result[fieldName] = null\n        }\n      }\n      result = config.postInit(result)\n      if (!globalConfig.extraProperties) {\n        Object.seal(result)\n      }\n      return result\n    }\n  }\n}\n\nexport default modelz\n"],"names":["noop","identity","thing","type","obj","toString","call","isArray","isFunction","isString","defaultFieldConfig","construct","getCacheKey","enumerable","required","defaultGlobalConfig","castString","parseNumbers","onChangeListener","extraProperties","embedPlainData","preInit","postInit","types","createCacheFunction","fieldConfig","cacheKey","map","prop","join","globalConfig","getConstructor","item","fieldName","constructors","Object","assign","string","value","Error","number","parseFloat","boolean","array","concat","object","date","Date","parseConfig","get","set","length","defaultValue","default","e","JSON","stringify","fields","config","modelName","name","thisSchema","sourceData","debug","extend","_schema","_data","onChange","result","fieldKeys","keys","ignoredProperties","filter","key","includes","defineProperty","hasOwnProperty","oldValue","seal"],"mappings":"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"}
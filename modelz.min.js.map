{"version":3,"file":"modelz.min.js","sources":["src/util.js","src/index.js"],"sourcesContent":["'use strict'\n\nexport function noop() {}\n\nexport function identity(thing) {\n  return thing\n}\n\nexport function type(obj) {\n  return {}.toString.call(obj)\n}\n\nexport function isObject(thing) {\n  return thing !== null && type(thing) === '[object Object]'\n}\n\nexport function isArray(thing) {\n  return type(thing) == '[object Array]'\n}\n\nexport function isFunction(thing) {\n  return typeof thing === 'function'\n}\n\nexport function isString(thing) {\n  return typeof thing === 'string'\n}\n\nexport function isNumber(thing) {\n  return typeof thing === 'number'\n}\n\nexport function isUndefined(thing) {\n  return typeof thing === 'undefined'\n}\n","'use strict'\n\nimport {\n  identity,\n  isArray,\n  isFunction,\n  isNumber,\n  isObject,\n  isString,\n  noop,\n} from './util'\n\nconst defaultFieldConfig = {\n  constructor: identity,\n  required: false,\n}\n\nconst defaultGlobalConfig = {\n  castString: true,\n  parseNumbers: true,\n  onChangeListener: function() {\n    return noop\n  },\n  extraProperties: false,\n  embedPlainData: true,\n  preInit: identity,\n  postInit: identity,\n  types: {},\n}\n\nfunction createCacheFunction(depProps) {\n  return function(obj) {\n    return depProps.map(prop => obj[prop]).join('|<3|')\n  }\n}\n\nfunction modelz(globalConfig) {\n  globalConfig = Object.assign({}, defaultGlobalConfig, globalConfig)\n  function getConstructor(item, fieldname) {\n    const constructors = Object.assign(\n      {\n        string(value) {\n          if (isString(value)) {\n            return value\n          }\n          if (globalConfig.castString) {\n            return '' + value\n          }\n          throw Error(`Expect a string for \"${fieldname}\", got \"${value}\"`)\n        },\n        number(value) {\n          if (isNumber(value)) {\n            return value\n          }\n          if (isString(value) && globalConfig.parseNumbers) {\n            return parseFloat(value)\n          }\n          throw Error(`Expect a number for \"${fieldname}\", got \"${value}\"`)\n        },\n        boolean(value) {\n          return !!value\n        },\n        array(value) {\n          return [].concat(value)\n        },\n        object(value) {\n          return Object.assign({}, value)\n        },\n        date(value) {\n          return new Date(value)\n        },\n        identity,\n      },\n      globalConfig.types\n    )\n\n    if (isFunction(item)) {\n      return item\n    }\n    if (constructors[item] == null) {\n      throw Error(\n        `Try to use unknown type \"${item}\" as type for \"${fieldname}\"`\n      )\n    }\n    return constructors[item]\n  }\n  function parseConfig(fieldConfig, fieldname) {\n    if (isArray(fieldConfig) && fieldConfig.length === 2) {\n      // short syntax without default [type, required]\n      const [type, required] = fieldConfig\n      return {\n        constructor: getConstructor(type, fieldname),\n        required,\n      }\n    }\n    if (isArray(fieldConfig) && fieldConfig.length === 3) {\n      // short syntax [type, required, default]\n      const [type, required, defaultValue] = fieldConfig\n      return {\n        constructor: getConstructor(type, fieldname),\n        required,\n        default: defaultValue,\n      }\n    }\n    if (isFunction(fieldConfig)) {\n      // plain constructor\n      return {\n        constructor: fieldConfig,\n      }\n    }\n    if (isObject(fieldConfig) && isFunction(fieldConfig.get)) {\n      // computed property\n      return {\n        getCacheKey: noop,\n        get: fieldConfig.get,\n        set: fieldConfig.set,\n      }\n    }\n    if (\n      isObject(fieldConfig) &&\n      isArray(fieldConfig.get) &&\n      isFunction(fieldConfig.get[0]) &&\n      (isFunction(fieldConfig.get[1]) || isArray(fieldConfig.get[1]))\n    ) {\n      // computed property with cache function\n      return {\n        getCacheKey: isArray(fieldConfig.get[1])\n          ? createCacheFunction(fieldConfig.get[1])\n          : fieldConfig.get[1],\n        get: fieldConfig.get[0],\n        set: fieldConfig.set,\n      }\n    }\n    if (isString(fieldConfig)) {\n      try {\n        // init by type\n        return {\n          constructor: getConstructor(fieldConfig, fieldname),\n        }\n      } catch (e) {\n        // fail silently and try next init\n      }\n    }\n    try {\n      // init by default\n      return {\n        constructor: getConstructor(typeof fieldConfig, fieldname),\n        required: true,\n        default: fieldConfig,\n      }\n    } catch (e) {\n      throw new Error(\n        `No proper config handler found for config:\\n${JSON.stringify(\n          fieldConfig\n        )}`\n      )\n    }\n  }\n\n  return function Schema(fields, config) {\n    config = Object.assign({}, globalConfig, config)\n    return function construct(data = {}) {\n      const _data = {}\n      let onChange = noop\n\n      let result = {}\n      if (config.extraProperties) {\n        result = Object.assign({}, data)\n      }\n\n      if (config.embedPlainData) {\n        result._data = _data\n      }\n      result = config.preInit(result)\n      onChange = config.onChangeListener(result)\n\n      for (const fieldname in fields) {\n        if (!fields.hasOwnProperty(fieldname)) {\n          continue\n        }\n        const fieldConfig = Object.assign(\n          {},\n          defaultFieldConfig,\n          parseConfig(fields[fieldname], fieldname)\n        )\n        if (data.hasOwnProperty(fieldname)) {\n          if (data[fieldname] == null) {\n            _data[fieldname] = data[fieldname]\n          } else {\n            _data[fieldname] = fieldConfig.constructor(data[fieldname], result)\n          }\n        } else if (fieldConfig.default === null) {\n          _data[fieldname] = fieldConfig.default\n        } else if (fieldConfig.hasOwnProperty('default')) {\n          _data[fieldname] = fieldConfig.constructor(\n            fieldConfig.default,\n            result\n          )\n        } else if (fieldConfig.required) {\n          throw Error(`No value set for ${fieldname}`)\n        }\n        Object.defineProperty(result, fieldname, {\n          enumerable: !isFunction(fieldConfig.get),\n          get: function() {\n            if (fieldConfig.get) {\n              const key = fieldConfig.getCacheKey(result)\n              if (\n                !_data.hasOwnProperty(fieldname) ||\n                key == null ||\n                key !== _data[fieldname].key\n              ) {\n                _data[fieldname] = {\n                  key,\n                  value: fieldConfig.get(result),\n                }\n              }\n              return _data[fieldname].value\n            }\n            return result._data[fieldname]\n          },\n          set: function(value) {\n            const oldValue = result[fieldname]\n            if (isFunction(fieldConfig.set)) {\n              fieldConfig.set(result, value)\n            } else {\n              _data[fieldname] = value\n            }\n            onChange(fieldname, value, oldValue)\n          },\n        })\n      }\n      result = config.postInit(result)\n      if (!globalConfig.extraProperties) {\n        Object.seal(result)\n      }\n      return result\n    }\n  }\n}\n\nexport default modelz\n"],"names":["noop","identity","thing","type","obj","toString","call","isObject","isArray","isFunction","isString","const","defaultFieldConfig","constructor","required","defaultGlobalConfig","castString","parseNumbers","onChangeListener","extraProperties","embedPlainData","preInit","postInit","types","globalConfig","getConstructor","item","fieldname","constructors","Object","assign","string","value","Error","number","parseFloat","boolean","array","concat","object","date","Date","fields","config","data","_data","onChange","result","hasOwnProperty","fieldConfig","length","default","defaultValue","get","getCacheKey","set","depProps","map","prop","join","e","JSON","stringify","parseConfig","defineProperty","enumerable","key","oldValue","seal"],"mappings":"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"}